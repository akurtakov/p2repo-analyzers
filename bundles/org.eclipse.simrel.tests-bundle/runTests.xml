<project
  name="SimRel Tests"
  basedir="."
  default="runTests">

  <property environment="env" />
	<!-- This property file name is itself a property, so it can be overridden 
		on one machine versus another. We do it this way, instead of just specifying 
		-propertyFile on command line, so that the property values can be "nested" 
		in other property values and evaluated lazily. -->

  <property
    name="aggrPropertyFile"
    value="aggr.properties" />

  <loadproperties srcfile="${aggrPropertyFile}" />

	<!-- unless otherwise defined in aggrPropertyFile, assume build home is 
		basedir -->
  <property
    name="env.BUILD_HOME"
    value="${basedir}" />

	<!-- By default, we'll put test output files in "reportOutputDir" + reporeports + reports so the index.html 
		file goes in "reportOutputDir" + reporeports, and verifydiroutput goes in "reportOutputDir" + reporeports + reports + verifyoutdir  -->
  <property
    name="reportOutputDir"
    value="${basedir}" />

  <!--
  <property
    name="reportRepoDir"
    value="${stagingDirectory}" />
  -->

  <property
    name="referenceRepoDir"
    value="${REPO_ROOT}/releases/luna/201502271000/" />

  <property
    name="eclipseTestExecutable"
    value="${ECLIPSE_TEST_EXE}" />

  <target name="validateOnly">
    <echo message="No validation-only tests, yet" />
    <echoproperties />
  </target>

  <target name="cachedBuild">
    <echo message="No cached build tests, yet" />
    <echoproperties />
  </target>

  <target
    name="cleanBuild"
    depends="runTests">
    <echo message="ran standard clean build reports/tests" />
  </target>

  <target name="runTests">
    <echo message="Creating Reports" />

    <echoproperties />

    <!-- <fail unless="stagingsegment" /> -->
    <echo message="reportOutputDir: ${reportOutputDir}" />
    <mkdir dir="${reportOutputDir}/reporeports" />

		<!-- NOTE: we strongly assume 'reportOutputDir' is dedicated completely 
			for our use. Do not set to user.home!! normally, on production machine 
			reportOutputDir = /shared/simrel/${release}/.
			If not specfified, the application assumes 
			reportOutputDir = ${user.dir}/temp/simrel -->
    <delete>
      <fileset dir="${reportOutputDir}/reporeports">
      </fileset>
    </delete>
    <mkdir dir="${reportOutputDir}/reporeports" />

		<!-- no longer needed, handled by app
		<copy tofile="${reportOutputDir}/reporeports/index.html" file="templateFiles/indexPending.html"
			overwrite="true" />
		-->

    <antcall target="runReports" />

		<!-- no longer needed, handled by app
		<copy tofile="${reportOutputDir}/reporeports/index.html" file="templateFiles/indexmainpresign.html"
			overwrite="true" />
		-->

    <antcall target="runSignatureVerification" />

		<!-- <mkdir dir="${reportOutputDir}/output-eclipse"/> <testLayouttask tempWorkingDir="/tmp/tempWorkingLocation" 
			directoryToCheck="/home/data/httpd/download.eclipse.org/eclipse/updates/3.7milestones/S-3.7RC3-I201105261708/" 
			outputResultsDirectory="${reportOutputDir}/output-eclipse" failuresoccurred="failuresoccurred"/> -->

		<!-- TODO: use tmp on staging directory to avoid filling up /tmp? -->
    <delete dir="/tmp/tempWorkingLocation" />

		<!-- currently, we never "fail" ... but, will in future -->
    <fail if="failuresoccurred" />
  </target>

  <target name="runReports">
    <property
      name="REPORT_APP_NAME"
      value="org.eclipse.simrel.tests.repoReport" />
    <property
      name="VM_TEST_ARGS"
      value="-Xmx256m -DreportOutputDir=${reportOutputDir} -DreportRepoDir=${testRepoDirectory} -DreferenceRepo=${referenceRepoDir}" />
		<!-- eclipseTestExecutable and JAVA_EXEC_DIR is set in aggr.properties, since specific to every machine -->
    <echo message="in runReports: eclipseTestExecutable: ${eclipseTestExecutable}" />
    <echo message="in runReports: REPORT_APP_NAME: ${REPORT_APP_NAME}" />
    <echo message="in runReports: JAVA_EXEC_DIR: ${JAVA_EXEC_DIR}" />
    <echo message="in runReports: VM_TEST_ARGS: ${VM_TEST_ARGS}" />
    <echo message="in runReports: reportOutputDir: ${reportOutputDir}" />
    <echo message="in runReports: testRepoDirectory: ${testRepoDirectory}" />
    <echo message="in runReports: referenceRepoDir: ${referenceRepoDir}" />
    <echo message="in runReports: basedir: ${basedir}" />
    <exec
      executable="${eclipseTestExecutable}"
      dir="${basedir}"
      failonerror="true">
      <arg value="-debug" />
      <arg value="-nosplash" />
      <arg value="-debug" />
      <arg value="--launcher.suppressErrors" />
      <arg value="-application" />
      <arg value="${REPORT_APP_NAME}" />
      <arg value="-vm" />
      <arg value="${JAVA_EXEC_DIR}" />
      <arg value="-vmargs" />
      <arg line="${VM_TEST_ARGS}" />
    </exec>
  </target>

    <!-- TODO: move this to java app too. May still want to have seperate, since takes so much longer -->
  <target name="runSignatureVerification">
    <exec executable="/bin/bash/" dir="${testRepoDirectory}" >
      <arg value="${BUILD_TESTS_DIR}/bundles/org.eclipse.simrel.tests-bundle/verifydir.sh" />
      <arg value="${testRepoDirectory}" />
      <arg value="${reportOutputDir}/reporeports/reports" />

			<!-- we'll check jars only, to save time ... assume pack.gz files would 
				be correct too. 
				Changed, when we wanted to also test for nested packed jars.
			-->
      <arg value=".*\(\.jar$\|\.jar\.pack\.gz$\)" /> 

			<!-- restricting to 'common' just for testing ... so finishes relatively quickly 
				<arg value=".*common.*\.jar$"/> -->
			<!-- 
			    <arg value=".*\.jar$" />
			-->
    </exec>

    <copy
      tofile="${reportOutputDir}/reporeports/index.html"
      file="${BUILD_TESTS_DIR}/src/templateFiles/indexmain.html"
      overwrite="true" />
  </target>

</project>