<project name="SimRel Tests" basedir="." default="runTests">

	<property environment="env" />
	<!-- This property file name is itself a property, so it can be overridden 
		on one machine versus another. We do it this way, instead of just specifying 
		-propertyFile on command line, so that the property values can be "nested" 
		in other property values and evaluated lazily. -->

	<property name="aggrPropertyFile" value="aggr.properties" />

	<property file="${aggrPropertyFile}" />

	<!-- unless otherwise defined in aggrPropertyFile, assume build home is 
		basedir -->
	<property name="env.BUILD_HOME" value="${basedir}" />

	<!-- By default, we'll put test output files in "reportOutputDir" + reporeports + reports so the index.html 
		file goes in "reportOutputDir" + reporeports, and verifydiroutput goes in "reportOutputDir" + reporeports + reports + verifyoutdir  -->
	<property name="reportOutputDir" value="${TEST_RESULTS}" />

	<property name="reportRepoDir" value="${stagingDirectory}" />

	<property name="referenceRepo" value="${REPO_ROOT}/releases/luna/201406250900/" />

	<property name="eclipseExecutable" value="${ECLIPSE_TEST_EXE}" />

	<target name="runTests">
		<echo message="Creating Reports" />

		<echoproperties />

		<fail unless="stagingsegment" />
		<echo message="reportOutputDir: ${reportOutputDir}" />
		<mkdir dir="${reportOutputDir}/reporeports" />

		<!-- NOTE: we strongly assume 'reportOutputDir' is dedicated completely 
			for our use. Do not set to user.home!! normally, on production machine 
			reportOutputDir = /shared/simrel/${release}/.
			If not specfified, the application assumes 
			reportOutputDir = ${user.dir}/temp/simrel -->
		<delete>
			<fileset dir="${reportOutputDir}/reporeports">
			</fileset>
		</delete>
		<mkdir dir="${reportOutputDir}/reporeports" />

		<!-- no longer needed, handled by app
		<copy tofile="${reportOutputDir}/reporeports/index.html" file="templateFiles/indexPending.html"
			overwrite="true" />
		-->

		<antcall target="runReports" />

		<!-- no longer needed, handled by app
		<copy tofile="${reportOutputDir}/reporeports/index.html" file="templateFiles/indexmainpresign.html"
			overwrite="true" />
		-->

		<antcall target="runSignatureVerification" />

		<!-- <mkdir dir="${reportOutputDir}/output-eclipse"/> <testLayouttask tempWorkingDir="/tmp/tempWorkingLocation" 
			directoryToCheck="/home/data/httpd/download.eclipse.org/eclipse/updates/3.7milestones/S-3.7RC3-I201105261708/" 
			outputResultsDirectory="${reportOutputDir}/output-eclipse" failuresoccurred="failuresoccurred"/> -->

		<!-- TODO: use tmp on staging directory to avoid filling up /tmp? -->
		<delete dir="/tmp/tempWorkingLocation" />

		<!-- currently, we never "fail" ... but, will in future -->
		<fail if="failuresoccurred" />
	</target>

	<target name="runReports">
		<property name="APP_NAME" value="org.eclipse.simrel.tests.repoReport" />
		<property name="VM_ARGS" value="-vmargs -Xmx256m -DreportOutputDir=${reportOutputDir} -DreportRepoDir=${reportRepoDir} -DreferenceRepo=${referenceRepo}" />
		<!-- eclipseExecutable and JAVA_EXEC_DIR is set in aggr.properties, since specific to every machine -->
		
		<exec executable="${eclipseExecutable}" dir="${basedir}" failonerror="true">
			<arg line="-debug -nosplash --launcher.suppressErrors -application ${APP_NAME} -vm ${JAVA_EXEC_DIR} ${VM_ARGS}" />
		</exec>
	</target>

    <!-- TODO: move this to java app too. May still want to have seperate, since takes so much longer -->
	<target name="runSignatureVerification">
		<exec executable="${BUILD_TESTS_DIR}/verifydir.sh">
			<arg value="${testRepoDirectory}" />
			<arg value="${reportOutputDir}/reporeports/reports" />

			<!-- we'll check jars only, to save time ... assume pack.gz files would 
				be correct too. 
				Changed, when we wanted to also test for nested packed jars.
			--> 
			<arg value=".*\(\.jar$\|\.jar\.pack\.gz$\)"/> 

			<!-- restricting to 'common' just for testing ... so finishes relatively 
				quickly <arg value=".*common.*\.jar$"/> -->
			
			<!-- 
			    <arg value=".*\.jar$" />
			-->
		</exec>

		<copy tofile="${reportOutputDir}/reporeports/index.html" file="${BUILD_TESTS_DIR}/src/templateFiles/indexmain.html" overwrite="true" />
	</target>

</project>